/*
-----------------------------------------------------------------------------
Filename:    BoneAnim.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC9 (August 2010)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/

#include "BoneAnim.h"

//-------------------------------------------------------------------------------------
BoneAnim::BoneAnim(void)
{
}
//-------------------------------------------------------------------------------------
BoneAnim::~BoneAnim(void)
{
}

//-------------------------------------------------------------------------------------
void BoneAnim::createScene(void)
{
	//创建骨骼动画
	createSkeletonAnimation();
	
	//创造手动控制的骨骼
	manCtrledBone = new ManuallyControlledBone("Bip01 L Forearm",dancer);//创建dancer实体名为Bip01 L Forearm的骨骼为手动控制骨骼
	initPos = manCtrledBone->getBonePos();//获取骨骼初始位置

    // Set ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5, 0.5, 0.5));

    // Create a light
    Ogre::Light* l = mSceneMgr->createLight("MainLight");
    l->setPosition(20,80,50);
}

void BoneAnim::createSkeletonAnimation(void)
{
	// 设置关键帧之间的插值方法为样条插值
	Ogre::Animation::setDefaultInterpolationMode(Ogre::Animation::IM_SPLINE);
	// 创建基于网格文件casual03_m_lowpoly.mesh的Entity 
	dancer = mSceneMgr->createEntity("robot", "casual03_m_lowpoly.mesh");
	// 绑定
	mSceneMgr->getRootSceneNode()->createChildSceneNode()->attachObject(dancer);
	// 得到实体当前动作序列对应的AnimationState类对象
	mAnimState = dancer->getAnimationState(actionList.getActName(actionList.getPresentActNum()));
	// “Enable”（起始）该动作
	mAnimState->setLoop(true);
	mAnimState->setEnabled(true);

	dancer->setCastShadows(true);//设置有阴影
}


bool BoneAnim::frameStarted(const Ogre::FrameEvent& evt)
{
	(void)evt;
	mAnimState->addTime(evt.timeSinceLastFrame);//动画动起来
	return true;
}

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        BoneAnim app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
