/*
 -----------------------------------------------------------------------------
 This source file is part of OGRE
 (Object-oriented Graphics Rendering Engine)
 For the latest info, see http://www.ogre3d.org/

 Copyright (c) 2000-2011 Torus Knot Software Ltd

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 -----------------------------------------------------------------------------
 */
#include "OgrePlatform.h"
#if OGRE_PLATFORM == OGRE_PLATFORM_SYMBIAN
#	ifdef __GCCE__
#		include <staticlibinit_gcce.h>
#	endif

#	include <e32base.h> // for Symbian classes.
#	include <coemain.h> // for CCoeEnv.

#endif

#include "SampleBrowser.h"
using namespace OgreBites;
void SampleBrowser::setupWidgets()
{
    mTrayMgr->destroyAllWidgets();

    // create main navigation tray
    mTrayMgr->showLogo(TL_RIGHT);
    mTrayMgr->createSeparator(TL_RIGHT, "LogoSep");
    mTrayMgr->createButton(TL_RIGHT, "StartStop", "Start Sample");
    mTrayMgr->createButton(TL_RIGHT, "UnloadReload", mLoadedSamples.empty() ? "Reload Samples" : "Unload Samples");
    mTrayMgr->createButton(TL_RIGHT, "Configure", "Configure");
    mTrayMgr->createButton(TL_RIGHT, "Quit", "Quit");

    // create sample viewing controls
    mTitleLabel = mTrayMgr->createLabel(TL_LEFT, "SampleTitle", "");
#if OGRE_PLATFORM == OGRE_PLATFORM_IPHONE
    mDescBox = mTrayMgr->createTextBox(TL_LEFT, "SampleInfo", "Sample Info", 120, 100);
    mCategoryMenu = mTrayMgr->createThickSelectMenu(TL_LEFT, "CategoryMenu", "Select Category", 120, 10);
    mSampleMenu = mTrayMgr->createThickSelectMenu(TL_LEFT, "SampleMenu", "Select Sample", 120, 10);
    mSampleSlider = mTrayMgr->createThickSlider(TL_LEFT, "SampleSlider", "Slide Samples", 120, 42, 0, 0, 0);
#else
    mDescBox = mTrayMgr->createTextBox(TL_LEFT, "SampleInfo", "Sample Info", 250, 208);
    mCategoryMenu = mTrayMgr->createThickSelectMenu(TL_LEFT, "CategoryMenu", "Select Category", 250, 10);
    mSampleMenu = mTrayMgr->createThickSelectMenu(TL_LEFT, "SampleMenu", "Select Sample", 250, 10);
    mSampleSlider = mTrayMgr->createThickSlider(TL_LEFT, "SampleSlider", "Slide Samples", 250, 80, 0, 0, 0);
#endif
    /* Sliders do not notify their listeners on creation, so we manually call the callback here
    to format the slider value correctly. */
    sliderMoved(mSampleSlider);

    // create configuration screen button tray
    mTrayMgr->createButton(TL_NONE, "Apply", "Apply Changes");
    mTrayMgr->createButton(TL_NONE, "Back", "Go Back");

    // create configuration screen label and renderer menu
    mTrayMgr->createLabel(TL_NONE, "ConfigLabel", "Configuration");
#if OGRE_PLATFORM == OGRE_PLATFORM_IPHONE
    mRendererMenu = mTrayMgr->createLongSelectMenu(TL_NONE, "RendererMenu", "Render System", 216, 115, 10);
#else
    mRendererMenu = mTrayMgr->createLongSelectMenu(TL_NONE, "RendererMenu", "Render System", 450, 240, 10);
#endif
    mTrayMgr->createSeparator(TL_NONE, "ConfigSeparator");

    // populate render system names
    Ogre::StringVector rsNames;
    Ogre::RenderSystemList rsList = mRoot->getAvailableRenderers();
    for (unsigned int i = 0; i < rsList.size(); i++)
    {
        rsNames.push_back(rsList[i]->getName());
    }
    mRendererMenu->setItems(rsNames);

    populateSampleMenus();


    ///My
    /*
    mTrayMgr->createButton();
    mTrayMgr->createCheckBox();
    mTrayMgr->createDecorWidget();
    mTrayMgr->createLabel();
    mTrayMgr->createLongSelectMenu();
    mTrayMgr->createLongSlider();
    mTrayMgr->createParamsPanel();
    mTrayMgr->createProgressBar();
    mTrayMgr->createSeparator();
    mTrayMgr->createTextBox();
    mTrayMgr->createThickSelectMenu();
    mTrayMgr->createThickSlider();
    */



    //button
    mTrayMgr->createButton(TL_TOPLEFT, "MyTestbutton", "Button");

    //textbox
    OgreBites::TextBox *textbox;
    textbox = mTrayMgr->createTextBox(TL_TOPLEFT, "mytesttextbox", "TextBox", 200, 100);
    ;
    textbox->appendText(Ogre::DisplayString("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));

    //SelectMenu
    OgreBites::SelectMenu *selectmeun;
    selectmeun = mTrayMgr->createLongSelectMenu(TL_TOPLEFT, "selectmenu", "SelectLong", 300, 200, 5);
    selectmeun->addItem(Ogre::DisplayString("°¡°¡°¡"));
    selectmeun->addItem(Ogre::DisplayString("cccc"));
    selectmeun->addItem(Ogre::DisplayString("bbbb"));

    selectmeun = mTrayMgr->createThickSelectMenu(TL_TOPLEFT, "select", "SelectT", 300, 5);
    selectmeun->addItem(Ogre::DisplayString("aaaaa"));
    selectmeun->addItem(Ogre::DisplayString("cccc"));
    selectmeun->addItem(Ogre::DisplayString("bbbb"));

    //Lable
	OgreBites::Label *lable;
	lable  = mTrayMgr->createLabel(TL_TOPLEFT,"lables","lable");
	


    //Separator
    mTrayMgr->createSeparator(TL_TOPLEFT, "", 100);

    //Slider

	mTrayMgr->createLongSlider(TL_TOPLEFT,"LSlider","Lsilder",300,200,50,0,100,1);

	mTrayMgr->createThickSlider(TL_TOPLEFT,"TSlider","Tslider",300,200,1,100,1);

    //paramsPanel

	mTrayMgr->createParamsPanel(TL_TOPLEFT,"panal",300,4);

    //checkbox
	OgreBites::CheckBox * checkbox;

	 checkbox = mTrayMgr->createCheckBox(TL_TOPLEFT,"check","check");
	// checkbox->

    //DecorWidget

	 //mTrayMgr->createDecorWidget();

    //progressbar
}



#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#elif OGRE_PLATFORM == OGRE_PLATFORM_APPLE
#include "SampleBrowser_OSX.h"
#elif OGRE_PLATFORM == OGRE_PLATFORM_IPHONE
#include "SampleBrowser_iOS.h"
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
INT WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, INT)
#elif OGRE_PLATFORM == OGRE_PLATFORM_SYMBIAN
int mainWithTrap();
int main()
{
    int res = 0;
    __UHEAP_MARK;

    // Create the control environment.
    CCoeEnv *environment = new (ELeave) CCoeEnv();

    TRAPD( err, environment->ConstructL( ETrue, 0 ) );

    if( err != KErrNone )
    {
        printf( "Unable to create a CCoeEnv!\n" );
        getchar();
    }

    TRAP( err, res = mainWithTrap());

    // Close the stdout & stdin, else printf / getchar causes a memory leak.
    fclose( stdout );
    fclose( stdin );

    // Cleanup
    CCoeEnv::Static()->DestroyEnvironment();
    delete CCoeEnv::Static();

    __UHEAP_MARKEND;

    return res;
}

int mainWithTrap()

#else

int main(int argc, char *argv[])
#endif
{
#if OGRE_PLATFORM == OGRE_PLATFORM_IPHONE
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    int retVal = UIApplicationMain(argc, argv, @"UIApplication", @"AppDelegate");
    [pool release];
    return retVal;
#elif (OGRE_PLATFORM == OGRE_PLATFORM_APPLE) && __LP64__
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

    mAppDelegate = [[AppDelegate alloc] init];
[[NSApplication sharedApplication] setDelegate: mAppDelegate];
    int retVal = NSApplicationMain(argc, (const char **) argv);

    [pool release];

    return retVal;
#else

    try
    {
        OgreBites::SampleBrowser sb;
        sb.go();
    }
    catch (Ogre::Exception &e)
    {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
        MessageBoxA(NULL, e.getFullDescription().c_str(), "An exception has occurred!", MB_ICONERROR | MB_TASKMODAL);
#else
        std::cerr << "An exception has occurred: " << e.getFullDescription().c_str() << std::endl;
#endif
#if OGRE_PLATFORM == OGRE_PLATFORM_SYMBIAN
        getchar();
#endif

    }

#endif
    return 0;
}

